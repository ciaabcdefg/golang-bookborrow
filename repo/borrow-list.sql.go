// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: borrow-list.sql

package repo

import (
	"context"

	"github.com/lib/pq"
)

const addBooksToBorrowList = `-- name: AddBooksToBorrowList :many
insert into "BookBorrow" ("BookID", "BorrowListID")
values (unnest($1::int[]), $2::int)
returning "BookID"
`

type AddBooksToBorrowListParams struct {
	BookIds      []int32
	BorrowListID int32
}

func (q *Queries) AddBooksToBorrowList(ctx context.Context, arg AddBooksToBorrowListParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, addBooksToBorrowList, pq.Array(arg.BookIds), arg.BorrowListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var BookID int32
		if err := rows.Scan(&BookID); err != nil {
			return nil, err
		}
		items = append(items, BookID)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createBorrowList = `-- name: CreateBorrowList :one
insert into "BorrowList" ("StudentID") values ($1) returning "ID"
`

func (q *Queries) CreateBorrowList(ctx context.Context, studentid int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBorrowList, studentid)
	var ID int32
	err := row.Scan(&ID)
	return ID, err
}

const getAllBorrowLists = `-- name: GetAllBorrowLists :many
select "ID", "StudentID", "BorrowedAt", "Status", "CreatedAt" from "BorrowList"
`

func (q *Queries) GetAllBorrowLists(ctx context.Context) ([]BorrowList, error) {
	rows, err := q.db.QueryContext(ctx, getAllBorrowLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BorrowList
	for rows.Next() {
		var i BorrowList
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.BorrowedAt,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMyBorrowLists = `-- name: GetAllMyBorrowLists :many
select "ID", "StudentID", "BorrowedAt", "Status", "CreatedAt" from "BorrowList"
where "StudentID" = $1
`

func (q *Queries) GetAllMyBorrowLists(ctx context.Context, studentid int32) ([]BorrowList, error) {
	rows, err := q.db.QueryContext(ctx, getAllMyBorrowLists, studentid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BorrowList
	for rows.Next() {
		var i BorrowList
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.BorrowedAt,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
