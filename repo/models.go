// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repo

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type BookStatus string

const (
	BookStatusUnavailable BookStatus = "Unavailable"
	BookStatusAvailable   BookStatus = "Available"
	BookStatusBorrowed    BookStatus = "Borrowed"
)

func (e *BookStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookStatus(s)
	case string:
		*e = BookStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookStatus: %T", src)
	}
	return nil
}

type NullBookStatus struct {
	BookStatus BookStatus
	Valid      bool // Valid is true if BookStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookStatus), nil
}

type Author struct {
	ID         int32
	PenName    string
	FirstName  sql.NullString
	MiddleName sql.NullString
	LastName   sql.NullString
	Gender     sql.NullString
}

type Book struct {
	ID          int32
	Title       string
	Description string
	Status      BookStatus
	PublishedAt sql.NullTime
	AddedAt     time.Time
}

type BookAuthor struct {
	BookID   int32
	AuthorID int32
}

type BookBorrow struct {
	BookID       int32
	BorrowListID int32
	Status       interface{}
	ReturnedAt   sql.NullTime
}

type BorrowList struct {
	ID         int32
	StudentID  int32
	BorrowedAt time.Time
	Status     interface{}
	CreatedAt  time.Time
}

type Student struct {
	ID         int32
	FirstName  string
	MiddleName sql.NullString
	LastName   string
	Password   string
	Gender     sql.NullString
}
